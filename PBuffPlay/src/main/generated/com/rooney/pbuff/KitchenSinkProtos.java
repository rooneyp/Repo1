// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main/proto/kitchensink.proto

package com.rooney.pbuff;

public final class KitchenSinkProtos {
  private KitchenSinkProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface KitchenSinkOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional double my_double = 1;
    boolean hasMyDouble();
    double getMyDouble();
    
    // optional float my_float = 2;
    boolean hasMyFloat();
    float getMyFloat();
    
    // optional int32 my_int32 = 3;
    boolean hasMyInt32();
    int getMyInt32();
    
    // optional int64 my_int64 = 4;
    boolean hasMyInt64();
    long getMyInt64();
    
    // optional uint32 my_uint32 = 5;
    boolean hasMyUint32();
    int getMyUint32();
    
    // optional uint64 my_uint64 = 6;
    boolean hasMyUint64();
    long getMyUint64();
    
    // optional sint32 my_sint32 = 7;
    boolean hasMySint32();
    int getMySint32();
    
    // optional sint64 my_sint64 = 8;
    boolean hasMySint64();
    long getMySint64();
    
    // optional fixed32 my_fixed32 = 9;
    boolean hasMyFixed32();
    int getMyFixed32();
    
    // optional fixed64 my_fixed64 = 10;
    boolean hasMyFixed64();
    long getMyFixed64();
    
    // optional sfixed32 my_sfixed32 = 11;
    boolean hasMySfixed32();
    int getMySfixed32();
    
    // optional sfixed64 my_sfixed64 = 12;
    boolean hasMySfixed64();
    long getMySfixed64();
    
    // optional bool my_bool = 13;
    boolean hasMyBool();
    boolean getMyBool();
    
    // optional string my_string = 14;
    boolean hasMyString();
    String getMyString();
    
    // optional bytes my_bytes = 15;
    boolean hasMyBytes();
    com.google.protobuf.ByteString getMyBytes();
    
    // optional string my_string3 = 16;
    boolean hasMyString3();
    String getMyString3();
  }
  public static final class KitchenSink extends
      com.google.protobuf.GeneratedMessage
      implements KitchenSinkOrBuilder {
    // Use KitchenSink.newBuilder() to construct.
    private KitchenSink(Builder builder) {
      super(builder);
    }
    private KitchenSink(boolean noInit) {}
    
    private static final KitchenSink defaultInstance;
    public static KitchenSink getDefaultInstance() {
      return defaultInstance;
    }
    
    public KitchenSink getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rooney.pbuff.KitchenSinkProtos.internal_static_tutorial_KitchenSink_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rooney.pbuff.KitchenSinkProtos.internal_static_tutorial_KitchenSink_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional double my_double = 1;
    public static final int MY_DOUBLE_FIELD_NUMBER = 1;
    private double myDouble_;
    public boolean hasMyDouble() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public double getMyDouble() {
      return myDouble_;
    }
    
    // optional float my_float = 2;
    public static final int MY_FLOAT_FIELD_NUMBER = 2;
    private float myFloat_;
    public boolean hasMyFloat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getMyFloat() {
      return myFloat_;
    }
    
    // optional int32 my_int32 = 3;
    public static final int MY_INT32_FIELD_NUMBER = 3;
    private int myInt32_;
    public boolean hasMyInt32() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getMyInt32() {
      return myInt32_;
    }
    
    // optional int64 my_int64 = 4;
    public static final int MY_INT64_FIELD_NUMBER = 4;
    private long myInt64_;
    public boolean hasMyInt64() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public long getMyInt64() {
      return myInt64_;
    }
    
    // optional uint32 my_uint32 = 5;
    public static final int MY_UINT32_FIELD_NUMBER = 5;
    private int myUint32_;
    public boolean hasMyUint32() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getMyUint32() {
      return myUint32_;
    }
    
    // optional uint64 my_uint64 = 6;
    public static final int MY_UINT64_FIELD_NUMBER = 6;
    private long myUint64_;
    public boolean hasMyUint64() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public long getMyUint64() {
      return myUint64_;
    }
    
    // optional sint32 my_sint32 = 7;
    public static final int MY_SINT32_FIELD_NUMBER = 7;
    private int mySint32_;
    public boolean hasMySint32() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getMySint32() {
      return mySint32_;
    }
    
    // optional sint64 my_sint64 = 8;
    public static final int MY_SINT64_FIELD_NUMBER = 8;
    private long mySint64_;
    public boolean hasMySint64() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public long getMySint64() {
      return mySint64_;
    }
    
    // optional fixed32 my_fixed32 = 9;
    public static final int MY_FIXED32_FIELD_NUMBER = 9;
    private int myFixed32_;
    public boolean hasMyFixed32() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public int getMyFixed32() {
      return myFixed32_;
    }
    
    // optional fixed64 my_fixed64 = 10;
    public static final int MY_FIXED64_FIELD_NUMBER = 10;
    private long myFixed64_;
    public boolean hasMyFixed64() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public long getMyFixed64() {
      return myFixed64_;
    }
    
    // optional sfixed32 my_sfixed32 = 11;
    public static final int MY_SFIXED32_FIELD_NUMBER = 11;
    private int mySfixed32_;
    public boolean hasMySfixed32() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public int getMySfixed32() {
      return mySfixed32_;
    }
    
    // optional sfixed64 my_sfixed64 = 12;
    public static final int MY_SFIXED64_FIELD_NUMBER = 12;
    private long mySfixed64_;
    public boolean hasMySfixed64() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public long getMySfixed64() {
      return mySfixed64_;
    }
    
    // optional bool my_bool = 13;
    public static final int MY_BOOL_FIELD_NUMBER = 13;
    private boolean myBool_;
    public boolean hasMyBool() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public boolean getMyBool() {
      return myBool_;
    }
    
    // optional string my_string = 14;
    public static final int MY_STRING_FIELD_NUMBER = 14;
    private java.lang.Object myString_;
    public boolean hasMyString() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public String getMyString() {
      java.lang.Object ref = myString_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          myString_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMyStringBytes() {
      java.lang.Object ref = myString_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        myString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional bytes my_bytes = 15;
    public static final int MY_BYTES_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString myBytes_;
    public boolean hasMyBytes() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    public com.google.protobuf.ByteString getMyBytes() {
      return myBytes_;
    }
    
    // optional string my_string3 = 16;
    public static final int MY_STRING3_FIELD_NUMBER = 16;
    private java.lang.Object myString3_;
    public boolean hasMyString3() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    public String getMyString3() {
      java.lang.Object ref = myString3_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          myString3_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMyString3Bytes() {
      java.lang.Object ref = myString3_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        myString3_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      myDouble_ = 0D;
      myFloat_ = 0F;
      myInt32_ = 0;
      myInt64_ = 0L;
      myUint32_ = 0;
      myUint64_ = 0L;
      mySint32_ = 0;
      mySint64_ = 0L;
      myFixed32_ = 0;
      myFixed64_ = 0L;
      mySfixed32_ = 0;
      mySfixed64_ = 0L;
      myBool_ = false;
      myString_ = "";
      myBytes_ = com.google.protobuf.ByteString.EMPTY;
      myString3_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, myDouble_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, myFloat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, myInt32_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, myInt64_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, myUint32_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt64(6, myUint64_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, mySint32_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt64(8, mySint64_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFixed32(9, myFixed32_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFixed64(10, myFixed64_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeSFixed32(11, mySfixed32_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeSFixed64(12, mySfixed64_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(13, myBool_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(14, getMyStringBytes());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBytes(15, myBytes_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(16, getMyString3Bytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, myDouble_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, myFloat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, myInt32_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, myInt64_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, myUint32_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, myUint64_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, mySint32_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(8, mySint64_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(9, myFixed32_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(10, myFixed64_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(11, mySfixed32_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(12, mySfixed64_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, myBool_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, getMyStringBytes());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, myBytes_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, getMyString3Bytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.rooney.pbuff.KitchenSinkProtos.KitchenSink parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rooney.pbuff.KitchenSinkProtos.KitchenSink prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rooney.pbuff.KitchenSinkProtos.KitchenSinkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rooney.pbuff.KitchenSinkProtos.internal_static_tutorial_KitchenSink_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rooney.pbuff.KitchenSinkProtos.internal_static_tutorial_KitchenSink_fieldAccessorTable;
      }
      
      // Construct using com.rooney.pbuff.KitchenSinkProtos.KitchenSink.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        myDouble_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        myFloat_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        myInt32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        myInt64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        myUint32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        myUint64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        mySint32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        mySint64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        myFixed32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        myFixed64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000200);
        mySfixed32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        mySfixed64_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        myBool_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        myString_ = "";
        bitField0_ = (bitField0_ & ~0x00002000);
        myBytes_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        myString3_ = "";
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rooney.pbuff.KitchenSinkProtos.KitchenSink.getDescriptor();
      }
      
      public com.rooney.pbuff.KitchenSinkProtos.KitchenSink getDefaultInstanceForType() {
        return com.rooney.pbuff.KitchenSinkProtos.KitchenSink.getDefaultInstance();
      }
      
      public com.rooney.pbuff.KitchenSinkProtos.KitchenSink build() {
        com.rooney.pbuff.KitchenSinkProtos.KitchenSink result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.rooney.pbuff.KitchenSinkProtos.KitchenSink buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.rooney.pbuff.KitchenSinkProtos.KitchenSink result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.rooney.pbuff.KitchenSinkProtos.KitchenSink buildPartial() {
        com.rooney.pbuff.KitchenSinkProtos.KitchenSink result = new com.rooney.pbuff.KitchenSinkProtos.KitchenSink(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.myDouble_ = myDouble_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.myFloat_ = myFloat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.myInt32_ = myInt32_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.myInt64_ = myInt64_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.myUint32_ = myUint32_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.myUint64_ = myUint64_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mySint32_ = mySint32_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mySint64_ = mySint64_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.myFixed32_ = myFixed32_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.myFixed64_ = myFixed64_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mySfixed32_ = mySfixed32_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.mySfixed64_ = mySfixed64_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.myBool_ = myBool_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.myString_ = myString_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.myBytes_ = myBytes_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.myString3_ = myString3_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rooney.pbuff.KitchenSinkProtos.KitchenSink) {
          return mergeFrom((com.rooney.pbuff.KitchenSinkProtos.KitchenSink)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.rooney.pbuff.KitchenSinkProtos.KitchenSink other) {
        if (other == com.rooney.pbuff.KitchenSinkProtos.KitchenSink.getDefaultInstance()) return this;
        if (other.hasMyDouble()) {
          setMyDouble(other.getMyDouble());
        }
        if (other.hasMyFloat()) {
          setMyFloat(other.getMyFloat());
        }
        if (other.hasMyInt32()) {
          setMyInt32(other.getMyInt32());
        }
        if (other.hasMyInt64()) {
          setMyInt64(other.getMyInt64());
        }
        if (other.hasMyUint32()) {
          setMyUint32(other.getMyUint32());
        }
        if (other.hasMyUint64()) {
          setMyUint64(other.getMyUint64());
        }
        if (other.hasMySint32()) {
          setMySint32(other.getMySint32());
        }
        if (other.hasMySint64()) {
          setMySint64(other.getMySint64());
        }
        if (other.hasMyFixed32()) {
          setMyFixed32(other.getMyFixed32());
        }
        if (other.hasMyFixed64()) {
          setMyFixed64(other.getMyFixed64());
        }
        if (other.hasMySfixed32()) {
          setMySfixed32(other.getMySfixed32());
        }
        if (other.hasMySfixed64()) {
          setMySfixed64(other.getMySfixed64());
        }
        if (other.hasMyBool()) {
          setMyBool(other.getMyBool());
        }
        if (other.hasMyString()) {
          setMyString(other.getMyString());
        }
        if (other.hasMyBytes()) {
          setMyBytes(other.getMyBytes());
        }
        if (other.hasMyString3()) {
          setMyString3(other.getMyString3());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              myDouble_ = input.readDouble();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              myFloat_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              myInt32_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              myInt64_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              myUint32_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              myUint64_ = input.readUInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              mySint32_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mySint64_ = input.readSInt64();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              myFixed32_ = input.readFixed32();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              myFixed64_ = input.readFixed64();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              mySfixed32_ = input.readSFixed32();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              mySfixed64_ = input.readSFixed64();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              myBool_ = input.readBool();
              break;
            }
            case 114: {
              bitField0_ |= 0x00002000;
              myString_ = input.readBytes();
              break;
            }
            case 122: {
              bitField0_ |= 0x00004000;
              myBytes_ = input.readBytes();
              break;
            }
            case 130: {
              bitField0_ |= 0x00008000;
              myString3_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional double my_double = 1;
      private double myDouble_ ;
      public boolean hasMyDouble() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public double getMyDouble() {
        return myDouble_;
      }
      public Builder setMyDouble(double value) {
        bitField0_ |= 0x00000001;
        myDouble_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyDouble() {
        bitField0_ = (bitField0_ & ~0x00000001);
        myDouble_ = 0D;
        onChanged();
        return this;
      }
      
      // optional float my_float = 2;
      private float myFloat_ ;
      public boolean hasMyFloat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getMyFloat() {
        return myFloat_;
      }
      public Builder setMyFloat(float value) {
        bitField0_ |= 0x00000002;
        myFloat_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyFloat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        myFloat_ = 0F;
        onChanged();
        return this;
      }
      
      // optional int32 my_int32 = 3;
      private int myInt32_ ;
      public boolean hasMyInt32() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getMyInt32() {
        return myInt32_;
      }
      public Builder setMyInt32(int value) {
        bitField0_ |= 0x00000004;
        myInt32_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyInt32() {
        bitField0_ = (bitField0_ & ~0x00000004);
        myInt32_ = 0;
        onChanged();
        return this;
      }
      
      // optional int64 my_int64 = 4;
      private long myInt64_ ;
      public boolean hasMyInt64() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public long getMyInt64() {
        return myInt64_;
      }
      public Builder setMyInt64(long value) {
        bitField0_ |= 0x00000008;
        myInt64_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyInt64() {
        bitField0_ = (bitField0_ & ~0x00000008);
        myInt64_ = 0L;
        onChanged();
        return this;
      }
      
      // optional uint32 my_uint32 = 5;
      private int myUint32_ ;
      public boolean hasMyUint32() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getMyUint32() {
        return myUint32_;
      }
      public Builder setMyUint32(int value) {
        bitField0_ |= 0x00000010;
        myUint32_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyUint32() {
        bitField0_ = (bitField0_ & ~0x00000010);
        myUint32_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint64 my_uint64 = 6;
      private long myUint64_ ;
      public boolean hasMyUint64() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public long getMyUint64() {
        return myUint64_;
      }
      public Builder setMyUint64(long value) {
        bitField0_ |= 0x00000020;
        myUint64_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyUint64() {
        bitField0_ = (bitField0_ & ~0x00000020);
        myUint64_ = 0L;
        onChanged();
        return this;
      }
      
      // optional sint32 my_sint32 = 7;
      private int mySint32_ ;
      public boolean hasMySint32() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getMySint32() {
        return mySint32_;
      }
      public Builder setMySint32(int value) {
        bitField0_ |= 0x00000040;
        mySint32_ = value;
        onChanged();
        return this;
      }
      public Builder clearMySint32() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mySint32_ = 0;
        onChanged();
        return this;
      }
      
      // optional sint64 my_sint64 = 8;
      private long mySint64_ ;
      public boolean hasMySint64() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public long getMySint64() {
        return mySint64_;
      }
      public Builder setMySint64(long value) {
        bitField0_ |= 0x00000080;
        mySint64_ = value;
        onChanged();
        return this;
      }
      public Builder clearMySint64() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mySint64_ = 0L;
        onChanged();
        return this;
      }
      
      // optional fixed32 my_fixed32 = 9;
      private int myFixed32_ ;
      public boolean hasMyFixed32() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public int getMyFixed32() {
        return myFixed32_;
      }
      public Builder setMyFixed32(int value) {
        bitField0_ |= 0x00000100;
        myFixed32_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyFixed32() {
        bitField0_ = (bitField0_ & ~0x00000100);
        myFixed32_ = 0;
        onChanged();
        return this;
      }
      
      // optional fixed64 my_fixed64 = 10;
      private long myFixed64_ ;
      public boolean hasMyFixed64() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public long getMyFixed64() {
        return myFixed64_;
      }
      public Builder setMyFixed64(long value) {
        bitField0_ |= 0x00000200;
        myFixed64_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyFixed64() {
        bitField0_ = (bitField0_ & ~0x00000200);
        myFixed64_ = 0L;
        onChanged();
        return this;
      }
      
      // optional sfixed32 my_sfixed32 = 11;
      private int mySfixed32_ ;
      public boolean hasMySfixed32() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public int getMySfixed32() {
        return mySfixed32_;
      }
      public Builder setMySfixed32(int value) {
        bitField0_ |= 0x00000400;
        mySfixed32_ = value;
        onChanged();
        return this;
      }
      public Builder clearMySfixed32() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mySfixed32_ = 0;
        onChanged();
        return this;
      }
      
      // optional sfixed64 my_sfixed64 = 12;
      private long mySfixed64_ ;
      public boolean hasMySfixed64() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public long getMySfixed64() {
        return mySfixed64_;
      }
      public Builder setMySfixed64(long value) {
        bitField0_ |= 0x00000800;
        mySfixed64_ = value;
        onChanged();
        return this;
      }
      public Builder clearMySfixed64() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mySfixed64_ = 0L;
        onChanged();
        return this;
      }
      
      // optional bool my_bool = 13;
      private boolean myBool_ ;
      public boolean hasMyBool() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public boolean getMyBool() {
        return myBool_;
      }
      public Builder setMyBool(boolean value) {
        bitField0_ |= 0x00001000;
        myBool_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyBool() {
        bitField0_ = (bitField0_ & ~0x00001000);
        myBool_ = false;
        onChanged();
        return this;
      }
      
      // optional string my_string = 14;
      private java.lang.Object myString_ = "";
      public boolean hasMyString() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public String getMyString() {
        java.lang.Object ref = myString_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          myString_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMyString(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        myString_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyString() {
        bitField0_ = (bitField0_ & ~0x00002000);
        myString_ = getDefaultInstance().getMyString();
        onChanged();
        return this;
      }
      void setMyString(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00002000;
        myString_ = value;
        onChanged();
      }
      
      // optional bytes my_bytes = 15;
      private com.google.protobuf.ByteString myBytes_ = com.google.protobuf.ByteString.EMPTY;
      public boolean hasMyBytes() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      public com.google.protobuf.ByteString getMyBytes() {
        return myBytes_;
      }
      public Builder setMyBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        myBytes_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyBytes() {
        bitField0_ = (bitField0_ & ~0x00004000);
        myBytes_ = getDefaultInstance().getMyBytes();
        onChanged();
        return this;
      }
      
      // optional string my_string3 = 16;
      private java.lang.Object myString3_ = "";
      public boolean hasMyString3() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      public String getMyString3() {
        java.lang.Object ref = myString3_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          myString3_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMyString3(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        myString3_ = value;
        onChanged();
        return this;
      }
      public Builder clearMyString3() {
        bitField0_ = (bitField0_ & ~0x00008000);
        myString3_ = getDefaultInstance().getMyString3();
        onChanged();
        return this;
      }
      void setMyString3(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00008000;
        myString3_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.KitchenSink)
    }
    
    static {
      defaultInstance = new KitchenSink(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.KitchenSink)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_KitchenSink_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_KitchenSink_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034main/proto/kitchensink.proto\022\010tutorial" +
      "\"\276\002\n\013KitchenSink\022\021\n\tmy_double\030\001 \001(\001\022\020\n\010m" +
      "y_float\030\002 \001(\002\022\020\n\010my_int32\030\003 \001(\005\022\020\n\010my_in" +
      "t64\030\004 \001(\003\022\021\n\tmy_uint32\030\005 \001(\r\022\021\n\tmy_uint6" +
      "4\030\006 \001(\004\022\021\n\tmy_sint32\030\007 \001(\021\022\021\n\tmy_sint64\030" +
      "\010 \001(\022\022\022\n\nmy_fixed32\030\t \001(\007\022\022\n\nmy_fixed64\030" +
      "\n \001(\006\022\023\n\013my_sfixed32\030\013 \001(\017\022\023\n\013my_sfixed6" +
      "4\030\014 \001(\020\022\017\n\007my_bool\030\r \001(\010\022\021\n\tmy_string\030\016 " +
      "\001(\t\022\020\n\010my_bytes\030\017 \001(\014\022\022\n\nmy_string3\030\020 \001(" +
      "\tB%\n\020com.rooney.pbuffB\021KitchenSinkProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_tutorial_KitchenSink_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_tutorial_KitchenSink_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_KitchenSink_descriptor,
              new java.lang.String[] { "MyDouble", "MyFloat", "MyInt32", "MyInt64", "MyUint32", "MyUint64", "MySint32", "MySint64", "MyFixed32", "MyFixed64", "MySfixed32", "MySfixed64", "MyBool", "MyString", "MyBytes", "MyString3", },
              com.rooney.pbuff.KitchenSinkProtos.KitchenSink.class,
              com.rooney.pbuff.KitchenSinkProtos.KitchenSink.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
